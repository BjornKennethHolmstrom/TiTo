<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸ•š TiTo</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <!-- Left Column: Project Management -->
        <div class="column">
            <h1>ðŸ•š TiTo Time Tracker</h1>
            <div class="section">
                <input type="text" id="newProjectName" placeholder="Enter new project name">
                <button id="addProjectButton">Add Project</button>
            </div>

            <div class="section">
                <h2>Projects</h2>
                <ul id="projectList">
                    <!-- Project list items will be inserted here -->
                </ul>
            </div>
            <button id="clearDatabaseButton" class="red-button">Clear Database</button>
        </div>

        <!-- Right Column: Time Tracking & Entries -->
        <div class="column">
            <div class="section">
                <h2>Current Project: <span id="currentProjectName">None</span></h2>
                <h3>Timer</h3>
                <div class="button-container">
                    <button id="startButton">Start</button>
                    <button id="stopButton">Stop</button>
                    <button id="pauseResumeButton">Pause</button>
                </div>
                <div id="timeDisplay">00:00:00</div>
            </div>
            <div class="section">
                <h2>Time Entries</h2>
                <button id="addManualEntryButton">Add Manual Entry</button>
                <ul id="timeEntryList">
                    <!-- Time entry list items will be inserted here -->
                </ul>
            </div>
        </div>
    </div>
    <script>
    // Global Variables
    let db;
    let dbReady = new Promise((resolve, reject) => {
        let request = indexedDB.open('TimeTrackerDB', 1);

        request.onerror = function(event) {
            reject('Error opening IndexedDB:', event);
        };

        request.onsuccess = function(event) {
            db = event.target.result;
            resolve();
        };

        request.onupgradeneeded = function(event) {
            db = event.target.result;
            let projectStore = db.createObjectStore('projects', { keyPath: 'id', autoIncrement: true });
            projectStore.createIndex('name', 'name', { unique: true });

            let timeEntryStore = db.createObjectStore('timeEntries', { keyPath: 'id', autoIncrement: true });
            timeEntryStore.createIndex('projectId', 'projectId', { unique: false });
            timeEntryStore.createIndex('description', 'description', { unique: false });
        };
    });

    let currentProject = null;
    let startTime;
    let elapsedTime = 0;
    let timerInterval;
    let isPaused = false;
    let isRunning = false;

    document.addEventListener('DOMContentLoaded', function() {
        const addProjectButton = document.getElementById('addProjectButton');
        const startButton = document.getElementById('startButton');
        const stopButton = document.getElementById('stopButton');
        const pauseResumeButton = document.getElementById('pauseResumeButton');
        const addManualEntryButton = document.getElementById('addManualEntryButton');
        if (addManualEntryButton) {
            addManualEntryButton.addEventListener('click', addManualEntry);
        }

        if (addProjectButton) {
            addProjectButton.addEventListener('click', addProject);
        }
        if (startButton) {
            startButton.addEventListener('click', startTimer);
        }
        if (stopButton) {
            stopButton.addEventListener('click', stopTimer);
        }
        if (pauseResumeButton) {
            pauseResumeButton.addEventListener('click', togglePauseResume);
        }
        document.getElementById('clearDatabaseButton').addEventListener('click', clearDatabase);
        document.getElementById('newProjectName').addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent the default form submission if applicable
                addProject(); // Call the addProject function
            }
        });
        loadProjects();
        loadTimeEntries();
        populateDropdowns();
    });

    function clearDatabase() {
        if (confirm('Are you sure you want to clear all data? This action cannot be undone.')) {
            dbReady.then(() => {
                let transaction = db.transaction(['projects', 'timeEntries'], 'readwrite');
                let projectStore = transaction.objectStore('projects');
                projectStore.clear().onsuccess = function() {
                    console.log('Projects cleared');
                    loadProjects(); // Update UI after clearing
                };
                let timeEntryStore = transaction.objectStore('timeEntries');
                timeEntryStore.clear().onsuccess = function() {
                    console.log('Time entries cleared');
                    location.reload();
                };

                transaction.onerror = function(event) {
                    console.error('Error clearing database:', event.target.errorCode);
                };
            }).catch(error => {
                console.error('Error clearing database:', error);
            });
        }
    }

    function populateDropdowns() {
        // Populate dropdowns with options (year, month, day, etc.)
    }

    function addProject() {
        dbReady.then(() => {
            const projectName = document.getElementById('newProjectName').value;
            if (projectName) {
                let transaction = db.transaction(['projects'], 'readwrite');
                let store = transaction.objectStore('projects');
                let request = store.add({ name: projectName });

                request.onsuccess = function() {
                    document.getElementById('newProjectName').value = '';
                    loadProjects();
                };

                request.onerror = function(event) {
                    console.error('Error adding project:', event);
                };
            } else {
                console.error('Project name is empty');
            }
        }).catch(error => {
            console.error('Database error:', error);
        });
    }

function loadProjects() {
    dbReady.then(() => {
        let transaction = db.transaction(['projects'], 'readonly');
        let store = transaction.objectStore('projects');
        let request = store.getAll();

        request.onsuccess = function(event) {
            const projects = event.target.result;
            console.log('Loaded projects:', projects);  // Add this line
            renderProjectList(projects);
            if (projects.length === 1) {
                setCurrentProject(projects[0]);
            }
        };

        request.onerror = function(event) {  // Add this error handler
            console.error('Error loading projects:', event);
        };
    }).catch(error => {
        console.error('Database error in loadProjects:', error);
    });
}

function renderProjectList(projects) {
    console.log('Rendering projects:', projects);  // Add this line
    const projectListElement = document.getElementById('projectList');
    if (!projectListElement) {  // Add this check
        console.error('Project list element not found');
        return;
    }
    projectListElement.innerHTML = '';

    projects.forEach(project => {
        const listItem = document.createElement('li');
        listItem.textContent = project.name;
        listItem.addEventListener('click', function() {
            setCurrentProject(project);
        });
        projectListElement.appendChild(listItem);
    });
}

    function setCurrentProject(project) {
        currentProject = project;
        document.getElementById('currentProjectName').textContent = project.name;
        loadTimeEntries(); // Load time entries when the current project is set
    }

function startTimer() {
    if (!currentProject) {
        alert('Please select a project first.');
        return;
    }
    if (isRunning) {
        alert("Timer is already running.");
        return;
    }

    isRunning = true;
    isPaused = false;
    startTime = Date.now();
    elapsedTime = 0;
    console.log('Timer started at:', new Date(startTime));
    timerInterval = setInterval(updateTimeDisplay, 1000);
}

function updateTimeDisplay() {
    if (isPaused || !isRunning) return;

    let currentTime = Date.now();
    elapsedTime = currentTime - startTime;
    const timeDisplay = document.getElementById('timeDisplay');
    timeDisplay.textContent = formatDuration(elapsedTime);
    console.log('Current elapsed time:', formatDuration(elapsedTime));
}

function togglePauseResume() {
    if (!isRunning) {
        alert("No timer is currently running.");
        return;
    }

    if (isPaused) {
        isPaused = false;
        startTime = Date.now() - elapsedTime;
        timerInterval = setInterval(updateTimeDisplay, 1000);
        console.log('Timer resumed at:', new Date());
    } else {
        isPaused = true;
        clearInterval(timerInterval);
        console.log('Timer paused at:', new Date());
    }
}

function stopTimer() {
    if (isRunning) {
        clearInterval(timerInterval);
        isRunning = false;
        isPaused = false;
        
        let stopTime = Date.now();
        elapsedTime = stopTime - startTime;
        
        console.log('Timer stopped at:', new Date(stopTime));
        console.log('Elapsed time (ms):', elapsedTime);
        
        // Save the time entry
        saveTimeEntry(startTime, stopTime);
        
        // Reset timer and UI
        resetTimer();
        
        // Reload the time entries list for the current project
        loadTimeEntries();
    } else {
        alert("No timer is currently running.");
    }
}

function resetTimer() {
    elapsedTime = 0;
    startTime = null;
    document.getElementById('timeDisplay').textContent = '00:00:00';
}

function loadTimeEntries() {
    if (!currentProject) {
        console.log('No current project, not loading time entries');
        return;
    }

    console.log('Loading time entries for project:', currentProject);

    dbReady.then(() => {
        let transaction = db.transaction(['timeEntries'], 'readonly');
        let store = transaction.objectStore('timeEntries');
        let index = store.index('projectId');
        let request = index.getAll(currentProject.id);

        request.onsuccess = function(event) {
            const timeEntries = event.target.result;
            console.log('Loaded time entries:', timeEntries);
            renderTimeEntryList(timeEntries);
        };

        request.onerror = function(event) {
            console.error('Error loading time entries:', event);
        };
    }).catch(error => {
        console.error('Database error in loadTimeEntries:', error);
    });
}

function renderTimeEntryList(timeEntries) {
    const timeEntryListElement = document.getElementById('timeEntryList');
    timeEntryListElement.innerHTML = '';

    timeEntries.forEach(entry => {
        const listItem = document.createElement('li');
        
        // Create dropdowns for start time
        const startDropdowns = createDateTimeDropdowns(new Date(entry.start), 'start');
        
        // Create dropdowns for end time
        const endDropdowns = createDateTimeDropdowns(new Date(entry.end), 'end');
        
        // Create span for total time
        const totalTimeSpan = document.createElement('span');
        totalTimeSpan.className = 'total-time';
        totalTimeSpan.textContent = formatDuration(entry.duration);

        // Create input field for description
        const descriptionInput = document.createElement('input');
        descriptionInput.type = 'text';
        descriptionInput.className = 'description-input';
        descriptionInput.value = entry.description || '';
        descriptionInput.placeholder = 'Enter task description';

        // Append all elements
        listItem.appendChild(document.createTextNode('Start: '));
        startDropdowns.forEach(dropdown => listItem.appendChild(dropdown));
        listItem.appendChild(document.createTextNode(' End: '));
        endDropdowns.forEach(dropdown => listItem.appendChild(dropdown));
        listItem.appendChild(document.createTextNode(' Total: '));
        listItem.appendChild(totalTimeSpan);
        listItem.appendChild(descriptionInput);

        // Create the remove button
        const removeButton = document.createElement('button');
        removeButton.textContent = 'X';
        removeButton.className = 'remove-time-entry-button';
        removeButton.addEventListener('click', (event) => {
            event.stopPropagation();
            removeTimeEntry(entry.id);
        });

        listItem.appendChild(removeButton);
        timeEntryListElement.appendChild(listItem);

        // Add event listeners to dropdowns and description input
        [...startDropdowns, ...endDropdowns].forEach(dropdown => {
            dropdown.addEventListener('change', () => updateTimeEntry(entry.id, listItem));
        });

        descriptionInput.addEventListener('input', () => updateTimeEntryDescription(entry.id, descriptionInput.value));
    });
}

function createDateTimeDropdowns(date, prefix) {
    const year = createDropdown(range(2020, 2030), date.getFullYear(), `${prefix}-year`);
    const month = createDropdown(range(1, 13), date.getMonth() + 1, `${prefix}-month`);
    const day = createDropdown(range(1, 32), date.getDate(), `${prefix}-day`);
    const hour = createDropdown(range(0, 24), date.getHours(), `${prefix}-hour`);
    const minute = createDropdown(range(0, 60), date.getMinutes(), `${prefix}-minute`);

    return [year, month, day, hour, minute];
}

function createDropdown(options, selectedValue, name) {
    const select = document.createElement('select');
    select.name = name;
    options.forEach(option => {
        const optionElement = document.createElement('option');
        optionElement.value = option;
        optionElement.textContent = option.toString().padStart(2, '0');
        if (option === selectedValue) optionElement.selected = true;
        select.appendChild(optionElement);
    });
    return select;
}

function range(start, end) {
    return Array.from({length: end - start}, (_, i) => start + i);
}

function updateTimeEntry(id, listItem) {
    const startDate = getDateFromDropdowns(listItem, 'start');
    const endDate = getDateFromDropdowns(listItem, 'end');
    const duration = endDate - startDate;

    // Update total time display
    const totalTimeSpan = listItem.querySelector('.total-time');
    totalTimeSpan.textContent = formatDuration(duration);

    // Update database
    dbReady.then(() => {
        let transaction = db.transaction(['timeEntries'], 'readwrite');
        let store = transaction.objectStore('timeEntries');
        let request = store.get(id);

        request.onsuccess = function(event) {
            let entry = event.target.result;
            entry.start = startDate.toISOString();
            entry.end = endDate.toISOString();
            entry.duration = duration;

            store.put(entry).onsuccess = function() {
                console.log('Time entry updated successfully');
            };
        };
    });
}

function updateTimeEntryDescription(id, description) {
    dbReady.then(() => {
        let transaction = db.transaction(['timeEntries'], 'readwrite');
        let store = transaction.objectStore('timeEntries');
        let request = store.get(id);

        request.onsuccess = function(event) {
            let entry = event.target.result;
            entry.description = description;

            store.put(entry).onsuccess = function() {
                console.log('Time entry description updated successfully');
            };
        };
    }).catch(error => {
        console.error('Database error:', error);
    });
}

function getDateFromDropdowns(listItem, prefix) {
    const year = listItem.querySelector(`[name="${prefix}-year"]`).value;
    const month = listItem.querySelector(`[name="${prefix}-month"]`).value - 1;
    const day = listItem.querySelector(`[name="${prefix}-day"]`).value;
    const hour = listItem.querySelector(`[name="${prefix}-hour"]`).value;
    const minute = listItem.querySelector(`[name="${prefix}-minute"]`).value;

    return new Date(year, month, day, hour, minute);
}

function formatDuration(duration) {
    const hours = Math.floor(duration / 3600000);
    const minutes = Math.floor((duration % 3600000) / 60000);
    const seconds = Math.floor((duration % 60000) / 1000);
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
}

function saveTimeEntry(startTime, endTime) {
    dbReady.then(() => {
        if (currentProject) {
            let transaction = db.transaction(['timeEntries'], 'readwrite');
            let store = transaction.objectStore('timeEntries');

            let entry = {
                projectId: currentProject.id,
                start: new Date(startTime).toISOString(),
                end: new Date(endTime).toISOString(),
                duration: endTime - startTime,
                description: ''
            };

            console.log('Saving time entry:',entry);
            console.log('Start:', new Date(startTime));
            console.log('End:', new Date(endTime));
            console.log('Duration:', formatDuration(entry.duration));
            console.log('Elapsed time (ms):', entry.duration);

            let request = store.add(entry);

            request.onsuccess = function() {
                console.log('Time entry saved successfully');
                loadTimeEntries(); // Refresh time entries for the current project
            };

            request.onerror = function(event) {
                console.error('Error saving time entry:', event);
            };
        } else {
            console.error('No project selected.');
            alert('Please select a project first.');
        }
    }).catch(error => {
        console.error('Database error:', error);
    });
}

function removeTimeEntry(id) {
    dbReady.then(() => {
        let transaction = db.transaction(['timeEntries'], 'readwrite');
        let store = transaction.objectStore('timeEntries');
        let request = store.delete(id);

        request.onsuccess = function() {
            console.log('Time entry removed');
            loadTimeEntries(); // Reload the time entries after removal
        };

        request.onerror = function(event) {
            console.error('Error removing time entry:', event);
        };
    }).catch(error => {
        console.error('Database error:', error);
    });
}

function addManualEntry() {
    if (!currentProject) {
        alert('Please select a project first.');
        return;
    }

    const now = new Date();
    const entry = {
        projectId: currentProject.id,
        start: now.toISOString(),
        end: now.toISOString(),
        duration: 0,
        description: ''
    };

    console.log('Adding manual entry:', entry);

    dbReady.then(() => {
        let transaction = db.transaction(['timeEntries'], 'readwrite');
        let store = transaction.objectStore('timeEntries');

        let request = store.add(entry);

        request.onsuccess = function(event) {
            console.log('Manual time entry added successfully');
            loadTimeEntries(); // Refresh time entries for the current project
        };

        request.onerror = function(event) {
            console.error('Error adding manual time entry:', event);
        };
    }).catch(error => {
        console.error('Database error:', error);
    });
}

    </script>
</body>
</html>

